package ca.mcgill.ecse321.eventregistration.controller;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import ca.mcgill.ecse321.eventregistration.dto.ErrorDto;
import ca.mcgill.ecse321.eventregistration.dto.MultiPersonResponseDto;
import ca.mcgill.ecse321.eventregistration.dto.PersonRequestDto;
import ca.mcgill.ecse321.eventregistration.dto.PersonResponseDto;
import ca.mcgill.ecse321.eventregistration.model.Person;
import ca.mcgill.ecse321.eventregistration.service.PersonService;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

/*
 * NOTES ABOUT SPRINGDOC:
 * 
 * There are a few different ways to control the docs generated by springdoc
 * regarding the HTTP response code. Here's my understanding of how it all
 * works after experimenting with it for a few minutes.
 *  - If there is a @ResponseStatus annotation on the controller method, it
 *    will use that value. This annotation also sets the status code in the
 *    actual response, unless you explicitly return a ResponseEntity. If you're
 *    returning a ResponseEntity only for the status code, it might be a good
 *    idea to go back to returning the DTO - that way you avoid the redundancy.
 *    Example: see the method for POST /person.
 *  - If there are exception handler methods with @ResponseStatus annotations,
 *    it will additionally list those error codes (whether or not your code
 *    actually throws that kind of exception!).
 *  - If there is an @ApiResponses annotation on the controller method, it will
 *    additionally show those responses. Example: see the method for
 *    GET /person/{id}, which might return 404.
 *  - By default, it assumes a 200 response code.
 * 
 * You may also notice that springdoc fails to properly detect the structure of
 * your JSON requests and responses in these cases (this is probably not an
 * exhaustive list!).
 *  - Some fields don't have a getter/setter.
 *  - You use Iterable instead of List (e.g., play with the ErrorDto).
 * 
 * It also acts a bit weird with times. Sending a string in HH:MM:SS format
 * seems to work in practice, but the docs show an object with fields hour,
 * minute, second, and nano.
 */
@RestController
public class PersonController {
	@Autowired
	private PersonService personService;
	
	/**
	 * Create a person.
	 * 
	 * @param personToCreate The person to create.
	 * @return The created person.
	 */
	@PostMapping("/person")
	@ResponseStatus(HttpStatus.CREATED)
	public PersonResponseDto createPerson(@RequestBody PersonRequestDto personToCreate) {
		Person personModel = personToCreate.toModel();
		Person createdPerson = personService.createPerson(personModel);
		PersonResponseDto responseBody = new PersonResponseDto(createdPerson);
		return responseBody;
	}
	
	/**
	 * Find all the people.
	 * 
	 * @return All the people.
	 */
	@GetMapping("/person")
	@ResponseStatus(HttpStatus.OK)
	public MultiPersonResponseDto readAllPeople() {
		Iterable<Person> allPeople = personService.readAllPeople();
		ArrayList<PersonResponseDto> dtos = new ArrayList<PersonResponseDto>();
		for (Person p : allPeople) {
			dtos.add(new PersonResponseDto(p));
		}
		return new MultiPersonResponseDto(dtos);
	}
	
	/**
	 * Find a specific person by ID.
	 * 
	 * @param id The person's primary key.
	 * @return The person.
	 */
	@GetMapping("/person/{id}")
	@ResponseStatus(HttpStatus.OK)
	@ApiResponses({
		@ApiResponse(
			responseCode = "404",
			description = "Not Found.",
			content = @Content(schema = @Schema(implementation = ErrorDto.class)))
	})
	public PersonResponseDto readPersonById(@PathVariable int id) {
		Person person = personService.readPersonById(id);
		return new PersonResponseDto(person);
	}
}
